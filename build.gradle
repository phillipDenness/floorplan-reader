import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.phillip.denness'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
mainClassName = 'com.phillip.denness.fps.Application'

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	jcenter()
}

ext {

	if (Os.isFamily(Os.FAMILY_UNIX)) {
		os = 'linux'
	}
	if (Os.isFamily(Os.FAMILY_MAC)) {
		os = 'macosx'
	}
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		os = 'windows'
	}
	arch = System.getProperty("os.arch");

	if(arch == 'amd64'){
		arch = 'x86_64'
	}
	opencvBinaryClassifer = os+'-'+arch
	println opencvBinaryClassifer
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'junit', name: 'junit', version: '4.12'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'org.bytedeco.javacpp-presets', name: 'tesseract' + '-platform', version: '4.0.0-rc2-1.4.3'
//	compile group: 'org.bytedeco.javacpp-presets', name: 'tesseract', version: '4.0.0-rc2-1.4.3', classifier: "windows-x86_64"
//	compile group: 'org.bytedeco.javacpp-presets', name: 'tesseract', version: '4.0.0-rc2-1.4.3', classifier: opencvBinaryClassifer
	compile group: 'org.bytedeco.javacpp-presets', name: 'leptonica', version: '1.76.0-1.4.3', classifier: opencvBinaryClassifer
	compile group: 'jmagick', name: 'jmagick', version: '6.6.9'
	compile group: 'org.im4java', name: 'im4java', version: '1.4.0'

}

bootJar {
	baseName 'floor-plan-scanner'
	archiveName = "$baseName"+".jar"
	destinationDir = file("$rootDir/build/libs")
	manifest {
		attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
	}
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean